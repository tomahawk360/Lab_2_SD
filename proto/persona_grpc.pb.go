// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: proto/persona.proto

package persona

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersonaServiceClient is the client API for PersonaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonaServiceClient interface {
	Subir(ctx context.Context, in *SubirPersonaReq, opts ...grpc.CallOption) (*SubirPersonaRes, error)
	Guardar(ctx context.Context, in *GuardarPersonaReq, opts ...grpc.CallOption) (*GuardarPersonaRes, error)
	Bajar(ctx context.Context, in *BajarPersonaReq, opts ...grpc.CallOption) (*BajarPersonaRes, error)
	Obtener(ctx context.Context, opts ...grpc.CallOption) (PersonaService_ObtenerClient, error)
}

type personaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonaServiceClient(cc grpc.ClientConnInterface) PersonaServiceClient {
	return &personaServiceClient{cc}
}

func (c *personaServiceClient) Subir(ctx context.Context, in *SubirPersonaReq, opts ...grpc.CallOption) (*SubirPersonaRes, error) {
	out := new(SubirPersonaRes)
	err := c.cc.Invoke(ctx, "/grpc.PersonaService/Subir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personaServiceClient) Guardar(ctx context.Context, in *GuardarPersonaReq, opts ...grpc.CallOption) (*GuardarPersonaRes, error) {
	out := new(GuardarPersonaRes)
	err := c.cc.Invoke(ctx, "/grpc.PersonaService/Guardar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personaServiceClient) Bajar(ctx context.Context, in *BajarPersonaReq, opts ...grpc.CallOption) (*BajarPersonaRes, error) {
	out := new(BajarPersonaRes)
	err := c.cc.Invoke(ctx, "/grpc.PersonaService/Bajar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personaServiceClient) Obtener(ctx context.Context, opts ...grpc.CallOption) (PersonaService_ObtenerClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonaService_ServiceDesc.Streams[0], "/grpc.PersonaService/Obtener", opts...)
	if err != nil {
		return nil, err
	}
	x := &personaServiceObtenerClient{stream}
	return x, nil
}

type PersonaService_ObtenerClient interface {
	Send(*ObtenerPersonaReq) error
	Recv() (*ObtenerPersonaRes, error)
	grpc.ClientStream
}

type personaServiceObtenerClient struct {
	grpc.ClientStream
}

func (x *personaServiceObtenerClient) Send(m *ObtenerPersonaReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personaServiceObtenerClient) Recv() (*ObtenerPersonaRes, error) {
	m := new(ObtenerPersonaRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PersonaServiceServer is the server API for PersonaService service.
// All implementations must embed UnimplementedPersonaServiceServer
// for forward compatibility
type PersonaServiceServer interface {
	Subir(context.Context, *SubirPersonaReq) (*SubirPersonaRes, error)
	Guardar(context.Context, *GuardarPersonaReq) (*GuardarPersonaRes, error)
	Bajar(context.Context, *BajarPersonaReq) (*BajarPersonaRes, error)
	Obtener(PersonaService_ObtenerServer) error
	mustEmbedUnimplementedPersonaServiceServer()
}

// UnimplementedPersonaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPersonaServiceServer struct {
}

func (UnimplementedPersonaServiceServer) Subir(context.Context, *SubirPersonaReq) (*SubirPersonaRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subir not implemented")
}
func (UnimplementedPersonaServiceServer) Guardar(context.Context, *GuardarPersonaReq) (*GuardarPersonaRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Guardar not implemented")
}
func (UnimplementedPersonaServiceServer) Bajar(context.Context, *BajarPersonaReq) (*BajarPersonaRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bajar not implemented")
}
func (UnimplementedPersonaServiceServer) Obtener(PersonaService_ObtenerServer) error {
	return status.Errorf(codes.Unimplemented, "method Obtener not implemented")
}
func (UnimplementedPersonaServiceServer) mustEmbedUnimplementedPersonaServiceServer() {}

// UnsafePersonaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonaServiceServer will
// result in compilation errors.
type UnsafePersonaServiceServer interface {
	mustEmbedUnimplementedPersonaServiceServer()
}

func RegisterPersonaServiceServer(s grpc.ServiceRegistrar, srv PersonaServiceServer) {
	s.RegisterService(&PersonaService_ServiceDesc, srv)
}

func _PersonaService_Subir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubirPersonaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonaServiceServer).Subir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PersonaService/Subir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonaServiceServer).Subir(ctx, req.(*SubirPersonaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonaService_Guardar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuardarPersonaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonaServiceServer).Guardar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PersonaService/Guardar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonaServiceServer).Guardar(ctx, req.(*GuardarPersonaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonaService_Bajar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BajarPersonaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonaServiceServer).Bajar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PersonaService/Bajar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonaServiceServer).Bajar(ctx, req.(*BajarPersonaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonaService_Obtener_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonaServiceServer).Obtener(&personaServiceObtenerServer{stream})
}

type PersonaService_ObtenerServer interface {
	Send(*ObtenerPersonaRes) error
	Recv() (*ObtenerPersonaReq, error)
	grpc.ServerStream
}

type personaServiceObtenerServer struct {
	grpc.ServerStream
}

func (x *personaServiceObtenerServer) Send(m *ObtenerPersonaRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personaServiceObtenerServer) Recv() (*ObtenerPersonaReq, error) {
	m := new(ObtenerPersonaReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PersonaService_ServiceDesc is the grpc.ServiceDesc for PersonaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.PersonaService",
	HandlerType: (*PersonaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subir",
			Handler:    _PersonaService_Subir_Handler,
		},
		{
			MethodName: "Guardar",
			Handler:    _PersonaService_Guardar_Handler,
		},
		{
			MethodName: "Bajar",
			Handler:    _PersonaService_Bajar_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Obtener",
			Handler:       _PersonaService_Obtener_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/persona.proto",
}
